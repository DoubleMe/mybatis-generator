apply plugin: 'war'

allprojects {
    apply plugin: 'idea'
    configurations {
        all*.exclude group: 'commons-logging', module: 'commons-logging'
        all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
        all*.exclude group: 'org.springframework', module: 'spring'
        all { resolutionStrategy.cacheChangingModulesFor 1, 'minutes' }
    }
    repositories {
        mavenCentral()
        maven { url "http://repo1.maven.org/maven2/" }
    }
    idea {
        module {
            excludeDirs = []
            [".idea", ".gradle", '.settings', 'build','classes'].each {
                excludeDirs << file("$it")
            }
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.debug = "on"
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    tasks.withType(Javadoc) {
        options.encoding = "UTF-8"
        options.charSet = "UTF-8"
    }

    dependencies {

        compile("org.slf4j:jcl-over-slf4j:1.7.12")
        compile("org.slf4j:log4j-over-slf4j:1.7.12")
        compile("ch.qos.logback:logback-classic:1.1.3")

        compile("com.fasterxml.jackson.core:jackson-databind:2.6.1")
        compile("dom4j:dom4j:1.6.1")
        compile("javax.servlet:javax.servlet-api:3.1.0") { transitive = false }
        compile("org.jboss.logging:jboss-logging:3.2.1.Final")

        compile("org.mybatis:mybatis:3.3.0")
        compile("org.mybatis:mybatis-spring:1.2.3")

        compile("com.alibaba:druid:1.0.15")
        compile("org.aspectj:aspectjrt:1.8.6")
        compile("org.aspectj:aspectjweaver:1.8.6")
        compile("mysql:mysql-connector-java:5.1.33")
        compile("com.alibaba:fastjson:1.2.8")
    }

}

sourceSets.main.output.resourcesDir = sourceSets.main.output.classesDir
sourceSets.test.output.resourcesDir = sourceSets.test.output.classesDir

task cleanAll << {
    println "Clean project.."
    delete buildDir
}

task initSourceFolders {
    sourceSets*.java.srcDirs*.each { it.mkdirs() }
    sourceSets*.resources.srcDirs*.each { it.mkdirs() }
}

task init << {
    println '+---------------------------------------------------+'
    println '|                                                   |'
    println "| B U I L D I N G $project.name $version .....      "
    println '|                                                   |'
    println '+---------------------------------------------------+'
}

compileJava.dependsOn([init])

/**
 * 拷贝jar
 */
task copyJar(type:Copy){
    from configurations.runtime
    into ('build/libs/lib')

}

/**
 * 打成可执行的jar
 */
task buildShareJar(dependsOn: [cleanAll,copyJar,jar],type: Jar){
    manifest {
        attributes 'Implementation-Title': 'Gradle'
        attributes 'Implementation-Version': version
        attributes 'Created-By': author
        attributes 'Main-Class': 'com.chm.generator.ShellRunner'
//        attributes 'Class-Path': configurations.compile.collect {'lib/' + it.getName()}.join(' ')
    }
    from({
        sourceSets.main.output.classesDir
    })
    destinationDir  = file( 'E:\\generate')
    archiveName = "$shareModuleName-${shareVersion}.jar"
}

/**
 * 生成接口文档
 */
task javaDoc(type:org.gradle.api.tasks.javadoc.Javadoc){
    title = "$project.name-$version API"
    source = sourceSets.main.allJava
    destinationDir  = file("D:\\doc\\$project.name-$version")
    include 'com/chm/generator/doc/**'
    exclude '**/impl'
}

task mybatisGenerator(){
    def jarFile = "E:\\generate\\simple-generator-1.0.jar"
    def configFile = "E:\\generate\\generator.xml"
    def projectPath = rootDir.getAbsolutePath()
    def cmd = "java -jar " + jarFile + " -configfile " + configFile + " -project " + projectPath
    println "**********************************************************************"
    println "shell: " + cmd
    println " "
    Process p = cmd.execute()
    println "${p.text}"
}



